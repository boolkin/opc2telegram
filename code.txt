/*=====================================================================
  File:      OPCCSharp.cs

  Summary:   OPC sample client for C#

-----------------------------------------------------------------------
  This file is part of the Viscom OPC Code Samples.

  Copyright(c) 2001 Viscom (www.viscomvisual.com) All rights reserved.

THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
PARTICULAR PURPOSE.
======================================================================*/

using System;
using System.Threading;
using System.Runtime.InteropServices;
using System.Configuration;
using OPC.Common;
using OPC.Data;
using System.Net;
using System.IO;
using System.Text;

namespace CSSample
{
    class Tester
    {
        private OpcServer theSrv;
        private OpcGroup theGrp;
        // разбираем все что написано в конфиге:

        string serverProgID = ConfigurationManager.AppSettings["opcID"]; 
        private static string[] tags = ConfigurationManager.AppSettings["checkTags"].Split(',');
        private static float[] currentValues = new float[tags.Length];
        private static string[] conditions = ConfigurationManager.AppSettings["tagsConditions"].Split(',');
        private static string[] message = ConfigurationManager.AppSettings["message"].Split(',');
        private static bool[] sndstat = new bool[tags.Length];

        private static string consoleOut = ConfigurationManager.AppSettings["consoleOutput"];
        private static int timeref = Int32.Parse(ConfigurationManager.AppSettings["refreshTime"]);

        private static string urlPrefix = ConfigurationManager.AppSettings["urlPrefix"];

        public void Work()
        {
            /*	try						// disabled for debugging
                {	*/

            theSrv = new OpcServer();
            theSrv.Connect(serverProgID);
            Thread.Sleep(500);              // we are faster then some servers!

            // add our only working group
            theGrp = theSrv.AddGroup("OPCCSharp-Group", false, timeref);

            var itemDefs = new OPCItemDef[tags.Length];
            for (var i = 0; i < tags.Length; i++)
            {
                itemDefs[i] = new OPCItemDef(tags[i], true, i, VarEnum.VT_EMPTY);
            }

            OPCItemResult[] rItm;
            theGrp.AddItems(itemDefs, out rItm);
            if (rItm == null)
                return;
            if (HRESULTS.Failed(rItm[0].Error) || HRESULTS.Failed(rItm[1].Error))
            {
                Console.WriteLine("OPC Tester: AddItems - some failed"); theGrp.Remove(true); theSrv.Disconnect(); return;

            };

            var handlesSrv = new int[itemDefs.Length];
            for (var i = 0; i < itemDefs.Length; i++)
            {
                handlesSrv[i] = rItm[i].HandleServer;
            }

            currentValues = new Single[itemDefs.Length];

            // asynch read our two items
            theGrp.SetEnable(true);
            theGrp.Active = true;
            theGrp.DataChanged += new DataChangeEventHandler(this.theGrp_DataChange);
            theGrp.ReadCompleted += new ReadCompleteEventHandler(this.theGrp_ReadComplete);


            int CancelID;

            int[] aE;
            theGrp.Read(handlesSrv, 55667788, out CancelID, out aE);

            // some delay for asynch read-complete callback (simplification)
            Thread.Sleep(500);


            // disconnect and close
            Console.WriteLine("************************************** hit <return> to close...");
            Console.ReadLine();
            theGrp.ReadCompleted -= new ReadCompleteEventHandler(this.theGrp_ReadComplete);
            theGrp.RemoveItems(handlesSrv, out aE);
            theGrp.Remove(false);
            theSrv.Disconnect();
            theGrp = null;
            theSrv = null;


            /*	}
            catch( Exception e )
                {
                Console.WriteLine( "EXCEPTION : OPC Tester " + e.ToString() );
                return;
                }	*/
        }

        // ------------------------------ events -----------------------------

        public void theGrp_DataChange(object sender, DataChangeEventArgs e)
        {

            foreach (OPCItemState s in e.sts)
            {
                if (HRESULTS.Succeeded(s.Error))
                {
                    if (consoleOut == "yes")
                    {
                        Console.WriteLine(" ih={0} v={1} q={2} t={3}", s.HandleClient, s.DataValue, s.Quality, s.TimeStamp); // выводит данные при изменении в консоль
                    }
                    currentValues[s.HandleClient] = Convert.ToSingle(s.DataValue); //добавляет в массив измененное значение тега
                }
                else
                    Console.WriteLine(" ih={0}    ERROR=0x{1:x} !", s.HandleClient, s.Error);
            }
            for (int i = 0; i < tags.Length; i++)
            {
                bool istrue = checkcond(conditions[i], i); // проверяем значение каждого тега из конфига с соответствующим условием записанным в конфиге 
                if (istrue && !sndstat[i]) // при этом идет проверка посылалось ли это сообщение уже, чтобы посылать сообщение лишь при однократном изменении тега
                {
                    telegramsend(message[i]);
                    sndstat[i] = true;
                }
                else if (!istrue) sndstat[i] = false;
            }

        }
        private static bool checkcond(string strcond, int index)
        {
            int pos = strcond.IndexOf(";"); // находим позицию точки с запятой
            float value = float.Parse(strcond.Substring(pos + 1)); // парсим значение которое идет после точки с запятой

            if (strcond.Contains("gt;"))
            {
                if (currentValues[index] > value) return true;
                else return false;
            }
            else if (strcond.Contains("lt;"))
            {
                if (currentValues[index] < value) return true;
                else return false;
            }
            else if (strcond.Contains("le;"))
            {
                if (currentValues[index] <= value) return true;
                else return false;
            }
            else if (strcond.Contains("ge;"))
            {
                if (currentValues[index] >= value) return true;
                else return false;
            }
            else if (strcond.Contains("ee;"))
            {
                if (currentValues[index] == value) return true;
                else return false;
            }
            else if (strcond.Contains("ne;"))
            {
                if (currentValues[index] != value) return true;
                else return false;
            }
            else return false;
        }
        private static void telegramsend(string msg)
        {
            if (consoleOut == "yes") Console.WriteLine("tgsend message: " + msg);
            try
            {
                string[] abonent = ConfigurationManager.AppSettings["abonents"].Split(',');

                for (int i = 0; i < abonent.Length; i++) // цикл для отправки сообщения каждому абоненту из конфига
                {
                    WebClient client = new WebClient(); // создаем Веб Клиент чтобы отправить через post запрос строку в тегерам
                    client.Encoding = Encoding.UTF8; // без этого у меня ругался на кириллицу
                    string reply = client.DownloadString(urlPrefix + "?text=" + DateTime.Now.ToString("HH:mm:ss ") + msg + "&chat_id=" + abonent[i]);
                    if (consoleOut == "yes") Console.WriteLine(reply);
                    //File.WriteAllText("C:\\logs\\tgsend_" + DateTime.Now.ToString("HHmmss") + ".txt", "reply from telegram: " + reply);
                }
            }
            catch (Exception ex)
            {
               // Console.WriteLine("исключение: " + ex.ToString() + "\n " + ex.Message);
                File.WriteAllText("C:\\logs\\err_tgend_" + DateTime.Now.ToString("HHmmss") + ".txt", "tgsend: " + ex.ToString() + "\n " + ex.Message);
            }

        }
        public void theGrp_ReadComplete(object sender, ReadCompleteEventArgs e)
        {
            Console.WriteLine("ReadComplete event: gh={0} id={1} me={2} mq={3}", e.groupHandleClient, e.transactionID, e.masterError, e.masterQuality);
            foreach (OPCItemState s in e.sts)
            {
                if (HRESULTS.Succeeded(s.Error))
                {
                    Console.WriteLine(" ih={0} v={1} q={2} t={3}", s.HandleClient, s.DataValue, s.Quality, s.TimeStamp);
                }
                else
                    Console.WriteLine(" ih={0}    ERROR=0x{1:x} !", s.HandleClient, s.Error);
            }
        }

        static void Main(string[] args)
        {
            Directory.CreateDirectory("C:\\logs\\"); // создаем папку если еще не создана для записи логов ошибок
            Tester tst = new Tester();
            tst.Work();
        }
    }
}

/* add this code to app.exe.config file
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
  </startup>
  
<appSettings>
    <add key="opcID" value="Graybox.Simulator" />

    <add key="checkTags" value="numeric.sin.int16,storage.bool.reg02" />
    <!-- ee;0 (equal 0) mean that program will send message then storage.bool.reg01 = 0 -->
    <add key="tagsConditions" value="ge;90,ee;1" />
    <add key="message" value="Внимание Авария (высокая температра)!,ALARM!!!" />
    <add key="abonents" value="702xxxx" />
    <add key="refreshTime" value="1000" />
    <!-- "yes" or "no" to show values in console -->
    <add key="consoleOutput" value="yes" />
    <!-- after urlPrefix automatically adds this: ?text=TimeNow+message&chat_id=abonents -->
    <!-- for example you can use urlPrefix https://api.telegram.org/bottoken/sendMessage -->
    <add key="urlPrefix" value="https://link.to/your/bot.php" />
  </appSettings>
</configuration>
 */
